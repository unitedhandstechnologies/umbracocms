@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<SiteMapPage>
@{
	Layout = "Main.cshtml";
	IPublishedContent siteHomePage = Model.Root();
	string excludedDocumentTypeList = Model.Value<string>("excludedDocumentTypes");
    string[] excludedDocumentTypes = (!String.IsNullOrEmpty(excludedDocumentTypeList)) ? excludedDocumentTypeList.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries).Select(p => p.Trim()).ToArray() : new string[] { };
    int maxSiteMapDepth = Model.HasValue("maxSiteMapDepth") ? Model.Value<int>("maxSiteMapDepth") : int.MaxValue; 
}
<div class="container">
    <section class="site-map">
        <div class="cards">
            @RenderSiteMapUrlEntriesForChildren(siteHomePage, excludedDocumentTypes)
        </div>
    </section>
</div>

@helper RenderSiteMapUrlEntriesForChildren(IPublishedContent parentPage, string[] excludedDocumentTypes){
foreach (var page in parentPage.Children.Where(f => !excludedDocumentTypes.Contains(f.ContentType.Alias))) {
    var link = EnsureUrlStartsWithDomain(page.Url(mode: UrlMode.Absolute));
    if (!link.Contains("site-map") && !link.Contains("sitemap")){
            <div class="card-item">
                <ul>
                    <li><a class="site-map-link" href="@link" style="@(page.Level < 3 ? "font-weight: bold" : "")">@page.Name</a></li>
                    @if (page.Level < 4 && page.Children.Any(f => !excludedDocumentTypes.Contains(f.ContentType.Alias) && !f.Value<bool>("hideFromXmlSiteMap"))) {
                        @RenderSiteMapUrlEntriesForChildren(page, excludedDocumentTypes)
                    }
                </ul>
            </div>
        }
    }
}
@functions {
    private static string EnsureUrlStartsWithDomain(string url)
    {
        if (url.StartsWith("http")){
            return url;
        }
        else {
            // whatever makes sense for your site here...
            var domainPrefix = $"https://{HttpContext.Current.Request.ServerVariables["HTTP_HOST"]}/";
            return domainPrefix + url;
        }
    }
}